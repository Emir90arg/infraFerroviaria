import Formacion.*
import Deposito.*
import Locomotora.*
import Vagones.*

describe "Primera parte"{
	var vagon = new VagonPasajeros(largo = 10, ancho = 4, tieneBanios = true, estaOrdenado = true)
	var vagon1 = new VagonPasajeros(largo = 7, ancho = 2, tieneBanios = false, estaOrdenado = false)
	var vagon2 = new VagonDeCarga(cargaMaximaIdeal = 6800, maderasSueltas = 5)
	var vagon3 = new VagonDormitorio(cantidadCompartimientos = 8, cantidadDeCamasEnCompartimiento = 3)
	var formacion1 = new Formacion()
	
	var vagon4 = new VagonDeCarga(cargaMaximaIdeal = 8000, maderasSueltas = 1)
	var vagon5 = new VagonDormitorio(cantidadCompartimientos = 15, cantidadDeCamasEnCompartimiento = 4)
	var formacion2 = new Formacion()
	
	fixture{
		formacion1.agregarAFormacion(vagon)
		formacion1.agregarAFormacion(vagon1)
		formacion1.agregarAFormacion(vagon2)
		formacion1.agregarAFormacion(vagon3)
		
		formacion2.agregarAFormacion(vagon4)
		formacion2.agregarAFormacion(vagon5)
	}
	
	test "Primera Formacion, cantidad pasajeros"{
		assert.equals(100,vagon.cantidadDePasajeros())
		assert.equals(41,vagon1.cantidadDePasajeros())
		assert.equals(0,vagon2.cantidadDePasajeros())
		assert.equals(24,vagon3.cantidadDePasajeros())
	}
	test "Primera Formacion, peso maximo vagon"{
		assert.equals(10300,vagon.pesoMaximoDeVagon())
		assert.equals(6080,vagon1.pesoMaximoDeVagon())
		assert.equals(6300,vagon2.pesoMaximoDeVagon())
		assert.equals(7120,vagon3.pesoMaximoDeVagon())		
	}
	test "Primera Formacion, cantidad maxima carga"{
		assert.equals(300,vagon.cantidadMaximaDeCarga())
		assert.equals(800,vagon1.cantidadMaximaDeCarga())
		assert.equals(4800,vagon2.cantidadMaximaDeCarga())
		assert.equals(1200,vagon3.cantidadMaximaDeCarga())
		
	}
	test "Primera Formacion, tiene ba√±os"{
		assert.that(vagon.tieneBanios())
		assert.notThat(vagon1.tieneBanios())
		assert.notThat(vagon2.tieneBanios())
		assert.that(vagon3.tieneBanios())
	}
	
	test "Primera Formacion, peso total de vagones"{
		assert.equals(29800,formacion1.pesoTotalDeVagones())
	}
	test "Primera Formacion, antes del mantenimiento"{
		assert.equals(165,formacion1.pasajerosQuePuedeLlevar())
		assert.equals(1,formacion1.vagonesPopulares())
		assert.notThat(formacion1.formacionCarguera())
		assert.equals(4220,formacion1.dispercionDePesos())
		assert.equals(2,formacion1.cantidadDeVagonesConBanios())
		assert.notThat(formacion1.estaOrganizado())
		assert.notThat(formacion1.estaEquilibradoEnPasajeros())		
	}
	
	test "Primera Formacion, despues del mantenimiento"{
		formacion1.mantenimientoDeFormacion()
		
		assert.equals(180,formacion1.pasajerosQuePuedeLlevar())
		assert.equals(2,formacion1.vagonesPopulares())
		assert.notThat(formacion1.formacionCarguera())
		assert.equals(3200,formacion1.dispercionDePesos())
		assert.equals(10300,formacion1.pesoVagonMasPesado())
		assert.equals(7100,formacion1.pesoVagonMasLiviano())
		assert.equals(2,formacion1.cantidadDeVagonesConBanios())
		assert.notThat(formacion1.estaOrganizado())
		assert.notThat(formacion1.estaEquilibradoEnPasajeros())
		
	}
		
	test "Segunda Formacion, antes del mantenimiento"{
		assert.equals(60,formacion2.pasajerosQuePuedeLlevar())
		assert.equals(1,formacion2.vagonesPopulares())
		assert.that(formacion2.formacionCarguera())
		assert.equals(900,formacion2.dispercionDePesos())
		assert.equals(1,formacion2.cantidadDeVagonesConBanios())
	}
	
	test "Segunda Formacion, despues del mantenimiento"{
		formacion2.mantenimientoDeFormacion()
		
		assert.equals(60,formacion2.pasajerosQuePuedeLlevar())
		assert.equals(1,formacion2.vagonesPopulares())
		assert.that(formacion2.formacionCarguera())
		assert.equals(500,formacion2.dispercionDePesos())
		assert.equals(1,formacion2.cantidadDeVagonesConBanios())
		
	}
		
		
}

	
	
	
	
